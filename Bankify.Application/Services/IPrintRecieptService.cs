using Bankify.Domain.Models.Accounts;
using Bankify.Domain.Models.Shared;
using QuestPDF.Fluent;
using QuestPDF.Helpers;

namespace Bankify.Application.Services
{
    public interface IPrintRecieptService
    {
        Task<byte[]> GenerateRecieptAsync(int transactionId, decimal amount, DateTime date,  TransactionType transactionType , Account creditAccount, Account? debitAccount);
    }

    public class PrintRecieptService : IPrintRecieptService
    {
        public async Task<byte[]> GenerateRecieptAsync( int transactionId, decimal amount, DateTime date, TransactionType transactionType , Account creditAccount, Account? debitAccount)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(creditAccount.User.FirstName) || string.IsNullOrWhiteSpace(creditAccount.AccountNumber))
                    throw new ArgumentException("Customer name or account number cannot be empty.");

                byte[] data = Document.Create(container =>
                {
                    container.Page(page =>
                    {
                        page.Size(PageSizes.A6);
                        page.MarginLeft(5);
                        page.MarginRight(5);
                        page.MarginTop(10);
                        page.MarginBottom(10);

                        page.Header()
                            .Text("Transaction Receipt - Bankify")                            
                            .SemiBold().FontSize(16).AlignCenter().FontColor(Colors.DeepPurple.Medium).FontFamily(Fonts.Verdana);

                        page.Content()                        
                            .PaddingVertical(10)
                            .Column(col =>
                            {
                                col.Item().Text("---------------------------------------").FontFamily(Fonts.LucidaConsole).FontSize(12).AlignCenter();
                                col.Spacing(8);
                                col.Item().Text($"Transaction Type: {transactionType.ToString()}").FontFamily(Fonts.LucidaConsole).FontSize(12);
                                col.Item().Text($"Transaction ID: {transactionId}").FontFamily(Fonts.LucidaConsole).FontSize(12);
                                if (creditAccount.User != null) 
                                {
                                    col.Item().Text($"Account Holder: {creditAccount.User.FirstName} {creditAccount.User.LastName}").FontFamily(Fonts.LucidaConsole).FontSize(12); 
                                }
                                if (creditAccount.AccountNumber != null) 
                                {
                                    col.Item().Text($"Credit Account: {creditAccount.AccountNumber}").FontFamily(Fonts.LucidaConsole).FontSize(12);
                                }
                              
                                col.Item().Text($"Credit Amount: ${amount:F2}").FontFamily(Fonts.LucidaConsole).FontSize(12);
                                col.Item().Text($"Date: {date:yyyy-MM-dd HH:mm:ss}").FontFamily(Fonts.LucidaConsole);
                                col.Item().Text("---------------------------------------").FontFamily(Fonts.LucidaConsole).FontSize(12).AlignCenter();                               
                                col.Item().PaddingTop(100).Text("Thank you for being our valued customer!").FontFamily(Fonts.LucidaConsole).FontSize(11).AlignCenter();                                                       
                            });

                          page.Footer()
                            .AlignCenter()                           
                            .Text("Generated by Bankify - " + DateTime.Now.ToString("yyyy-MM-dd HH:mm")).FontFamily(Fonts.CourierNew).FontSize(14).FontColor(Colors.DeepPurple.Darken1);
                    });
                }).GeneratePdf();

                return await Task.FromResult(data);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GenerateReceiptAsync: {ex.Message}");
                throw;
            }
        }
    }
}
